# This workflow runs on all pull requests. It has the following functions:
#   1. Apply flake8 to the codebase for linting
#   2. Run either the default test suite, or pass custom cmd line flags if specified in
#      the PR comments, on all supported python versions and operating systems.

name: pull_request_tests
on: pull_request

# Set globally scoped environmental variables.
env:
  ISSUE_NUMBER: ${{ github.event.pull_request.number }}
  PR_URL: https://github.com/obspy/obspy/pull/${{ github.event.pull_request.number }}
  CI_URL: https://github.com/obspy/obspy/actions/runs/${{ github.run_id }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


jobs:
  check_running_or_queue_jobs_to_cancel:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs in the same PR
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  # Simply applies flake8 to the codebase.
  lint_code:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2.3.1
        with:
          python-version: '3.x'

      - name: Install flake8
        run: |
          python -m pip install wheel
          python -m pip install flake8

      - name: Set up reviewdog
        run: |
          mkdir -p $HOME/bin
          curl -sfL \
            https://github.com/reviewdog/reviewdog/raw/master/install.sh | \
              sh -s -- -b $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: flake8
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -o pipefail
          python -m flake8 obspy | \
            reviewdog -f=pep8 -name=flake8 \
              -tee -reporter=github-check -filter-mode nofilter

  # Runs the tests on combinations of the supported python/os matrix.
  test_code:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10']
        include:
          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/test

          - os: macos-latest
            label: osx-64
            prefix: /Users/runner/miniconda3/envs/test

          - os: windows-latest
            label: win-64
            prefix: C:\Miniconda3\envs\test

    steps:
      - uses: actions/checkout@v2

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: test${{ matrix.python-version }}
          use-mamba: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}${{ matrix.python-version }}
          key: ${{ matrix.label }}-conda-py${{ matrix.python-version }}-${{ hashFiles('.github/test_conda_env-${{ matrix.python-version }}.yml') }}-${{ steps.date.outputs.date }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: mamba env update -n test${{ matrix.python-version }} -f .github/test_conda_env-${{ matrix.python-version }}.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: print package info
        shell: bash -l {0}
        run: |
          conda info -a
          conda list

      - name: parse comment for test flags
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: '+TEST:'

      - name: set test flags
        shell: bash -l {0}
        if: steps.fc.outputs.comment-id != 0
        run: |
            FLAGS=`python -c "print([s for s in '${{ steps.fc.outputs.comment-body }}'.split() if '+TEST:' in s][0].split(':', 1)[1].replace(',', ' '))"`
            echo "TESTFLAGS=$FLAGS" >> $GITHUB_ENV
            echo $FLAGS

      - name: install obspy
        shell: bash -l {0}
        run: |
          python -m pip install -e .[tests]

      - name: run test suite
        shell: bash -l {0}
        run: |
          obspy-runtests --coverage --keep-images --report $TESTFLAGS

      - name: upload coverage
        uses: codecov/codecov-action@v2.1.0
        with:
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: false
          file: obspy/coverage.xml

      - name: upload image directory
        uses: actions/upload-artifact@v2
        with:
          name: "images_${{ github.event.pull_request.number }}_${{ matrix.python-version }}_${{ matrix.os }}"
          path: obspy/obspy_test_images
          retention-days: 1


# This is a very useful step for debugging, it allows you to ssh into the CI
# machine (https://github.com/marketplace/actions/debugging-with-tmate).
# Make sure to open the log before the job starts else you cant see the tmate
# url. See https://github.com/mxschmitt/action-tmate/issues/1.
# Also, the CI machine will close on a non-zero exit code (annoying). This can
# be overcome by coalescing the null command like so:
# $ some-command-that-can-fail || :
#
#- name: Setup tmate session
#  uses: mxschmitt/action-tmate@v1
