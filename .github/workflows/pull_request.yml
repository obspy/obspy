# This workflow runs on all pull requests. It has the following functions:
#   1. Apply flake8 to the codebase for linting
#   2. Run either the default test suite, or specific tests if specified in
#      the PR comments, on all supported python versions and operating systems.

name: pull_request_tests
on: pull_request

# Set globally scoped environmental variables.
env:
  ISSUE_NUMBER: ${{ github.event.pull_request.number }}
  PR_URL: https://github.com/obspy/obspy/pull/${{ github.event.pull_request.number }}
  CI_URL: https://github.com/obspy/obspy/actions/runs/${{ github.run_id }}
  CONFIG_PATH: conf.json
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OBSPY_GITHUB_BRANCH: release_0.10.0


jobs:
  # Parse the comments from the PR and uploads a json with selected options
  get_ci_config:
    runs-on: ubuntu-latest

    steps:
      - name: checkout obspy
        uses: actions/checkout@v2.3.4

      - name: Setup python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: '3.x'

      - name: create ci config
        run: |
          python -m pip install git+https://github.com/obspy/obspy_github_api@${OBSPY_GITHUB_BRANCH}
          obshub make-config ${ISSUE_NUMBER} --path=${CONFIG_PATH} --token=${GITHUB_TOKEN}

      - name: upload ci config
        uses: actions/upload-artifact@v2.2.3
        with:
          name: obspy_ci_config
          path: ${{ env.CONFIG_PATH }}

  # Simply applies flake8 to the codebase.
  lint_code:
    runs-on: ubuntu-latest

    steps:
      - name: checkout obspy
        uses: actions/checkout@v2.3.4

      - name: Setup python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: '3.x'

      - name: Install flake8
        run: |
          python -m pip install wheel
          python -m pip install flake8

      - name: Set up reviewdog
        run: |
          mkdir -p $HOME/bin
          curl -sfL \
            https://github.com/reviewdog/reviewdog/raw/master/install.sh | \
              sh -s -- -b $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: flake8
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -o pipefail
          python -m flake8 obspy | \
            reviewdog -f=pep8 -name=flake8 \
              -tee -reporter=github-check -filter-mode nofilter

  # Runs the tests on combinations of the supported python/os matrix.
  test_code:
    runs-on: ${{ matrix.os }}
    needs: get_ci_config
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-11, macos-10.15, windows-latest]
        python-version: [3.7, 3.8, 3.9, "3.10"]

    steps:
      - name: checkout obspy
        uses: actions/checkout@v2.3.4

      - name: Setup python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install some dependencies
        shell: bash -l {0}
        run: |
          export PATH="$pythonLocation/bin/:$PATH" # This is workaround for actions/setup-python#132
          python -m pip install coverage pyimgur

      - name: print package info
        shell: bash -l {0}
        run: |
          python -m pip list
          python --version

      - name: download test config
        uses: actions/download-artifact@v2.0.9
        with:
          name: obspy_ci_config

      - name: install obspy
        shell: bash -l {0}
        run: |
          export PATH="$pythonLocation/bin/:$PATH"
          python -m pip install -e .

      - name: install obspy github api
        shell: bash -l {0}
        run: |
          export PATH="$pythonLocation/bin/:$PATH"
          python -m pip install git+https://github.com/obspy/obspy_github_api@${OBSPY_GITHUB_BRANCH}

      - name: run test suite
        shell: bash -l {0}
        run: |
          export PATH="$pythonLocation/bin/:$PATH"
          export MODULELIST=`obshub read-config-value module_list --path=${CONFIG_PATH}`
          export MODULELISTSPACES=`obshub read-config-value module_list_spaces --path=${CONFIG_PATH}`
          coverage run --rcfile=.coveragerc --source=${MODULELIST} -m obspy.scripts.runtests --no-flake8 -n gh-actions -r --ci-url="${CI_URL}" --pr-url="${PR_URL}" $MODULELISTSPACES
      
      - name: parse coverage results
        shell: bash -l {0}
        run: |
          coverage xml -o coverage.xml

      - name: upload coverage
        uses: codecov/codecov-action@v1.5.2
        with:
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: false
          file: coverage.xml


# This is a very useful step for debugging, it allows you to ssh into the CI
# machine (https://github.com/marketplace/actions/debugging-with-tmate).
# Make sure to open the log before the job starts else you cant see the tmate
# url. See https://github.com/mxschmitt/action-tmate/issues/1.
# Also, the CI machine will close on a non-zero exit code (annoying). This can
# be overcome by coalescing the null command like so:
# $ some-command-that-can-fail || :
#
#- name: Setup tmate session
#  uses: mxschmitt/action-tmate@v1
