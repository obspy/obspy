# This workflow runs on all pull requests. It has the following functions:
#   1. Apply flake8 to the codebase for linting
#   2. Run the default test suite, then, optionally, run network tests,
#      upload images, build docs, etc. based on tags in the PR.

name: pr
on: pull_request

# Set globally scoped environmental variables.
env:
  ISSUE_NUMBER: ${{ github.event.pull_request.number }}
  PR_URL: https://github.com/obspy/obspy/pull/${{ github.event.pull_request.number }}
  CI_URL: https://github.com/obspy/obspy/actions/runs/${{ github.run_id }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Cancel previous runs
concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  add_status_with_report_link:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no_ci') }}
    steps:
      - name: Set status with url of test report website
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "state": "success",
            "context": "See details about all test reports for this pull request here",
            "target_url": "https://tests.obspy.org/?pr=${{ github.event.pull_request.number }}"
            }'

  # Simply applies flake8 to the codebase.
  lint_code:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no_ci') }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2.3.1
        with:
          python-version: '3.x'

      - name: Install flake8
        run: |
          python -m pip install wheel
          python -m pip install flake8

      - name: Set up reviewdog
        run: |
          mkdir -p $HOME/bin
          curl -sfL \
            https://github.com/reviewdog/reviewdog/raw/master/install.sh | \
              sh -s -- -b $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: flake8
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -o pipefail
          python -m flake8 obspy | \
            reviewdog -f=pep8 -name=flake8 \
              -tee -reporter=github-check -filter-mode nofilter

  # Runs the tests on combinations of the supported python/os matrix.
  default_tests:
    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no_ci') }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        include:
          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/test

          - os: macos-latest
            label: osx-64
            prefix: /Users/runner/miniconda3/envs/test

          - os: windows-latest
            label: win-64
            prefix: C:\Miniconda3\envs\test

    steps:
      - uses: actions/checkout@v2

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: test${{ matrix.python-version }}
          use-mamba: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}${{ matrix.python-version }}
          key: ${{ matrix.label }}-conda-py${{ matrix.python-version }}-${{ hashFiles('.github/test_conda_env-${{ matrix.python-version }}.yml') }}-${{ steps.date.outputs.date }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: mamba env update -n test${{ matrix.python-version }} -f .github/test_conda_env-${{ matrix.python-version }}.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: print package info
        shell: bash -l {0}
        run: |
          conda info -a
          conda list

      - name: install obspy
        shell: bash -l {0}
        run: |
          python -m pip install -e .[tests]

      - name: run default tests
        id: tests
        shell: bash -l {0}
        run: |
          obspy-runtests --cov obspy --cov-report='xml' --cov-append --keep-images --report

      - name: upload coverage
        uses: codecov/codecov-action@v2.1.0
        if: always() && (steps.tests.outcome == 'success' || steps.tests.outcome == 'failure')
        with:
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: false
          file: obspy/coverage.xml

      - name: optionally upload image directory
        if: always() && (steps.tests.outcome == 'success' || steps.tests.outcome == 'failure') && contains(github.event.pull_request.labels.*.name, 'upload_images')
        uses: actions/upload-artifact@v2
        with:
          name: "images_${{ github.event.pull_request.number }}_${{ matrix.python-version }}_${{ matrix.os }}"
          path: obspy/obspy_test_images
          retention-days: 1


 # Runs network tests
  network_tests:
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no_ci') && contains(github.event.pull_request.labels.*.name, 'test_network') }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7']
        include:
          - os: ubuntu-latest
            python-version: '3.10'

          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/test

          - os: macos-latest
            label: osx-64
            prefix: /Users/runner/miniconda3/envs/test

          - os: windows-latest
            label: win-64
            prefix: C:\Miniconda3\envs\test

    steps:
      - uses: actions/checkout@v2

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: test${{ matrix.python-version }}
          use-mamba: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}${{ matrix.python-version }}
          key: ${{ matrix.label }}-conda-py${{ matrix.python-version }}-${{ hashFiles('.github/test_conda_env-${{ matrix.python-version }}.yml') }}-${{ steps.date.outputs.date }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: mamba env update -n test${{ matrix.python-version }} -f .github/test_conda_env-${{ matrix.python-version }}.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: print package info
        shell: bash -l {0}
        run: |
          conda info -a
          conda list

      - name: install obspy
        shell: bash -l {0}
        run: |
          python -m pip install -e .[tests]

      - name: run network tests
        id: tests
        shell: bash -l {0}
        run: |
          obspy-runtests --cov obspy --cov-report='xml' --cov-append --keep-images --report --network

      - name: upload coverage
        uses: codecov/codecov-action@v2.1.0
        if: always() && (steps.tests.outcome == 'success' || steps.tests.outcome == 'failure')
        with:
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: false
          file: obspy/coverage.xml

      - name: optionally upload image directory
        if: always() && (steps.tests.outcome == 'success' || steps.tests.outcome == 'failure') && contains(github.event.pull_request.labels.*.name, 'upload_images')
        uses: actions/upload-artifact@v2
        with:
          name: "images_${{ github.event.pull_request.number }}_${{ matrix.python-version }}_${{ matrix.os }}_network"
          path: obspy/obspy_test_images
          retention-days: 1



# This is a very useful step for debugging, it allows you to ssh into the CI
# machine (https://github.com/marketplace/actions/debugging-with-tmate).
#- name: Setup tmate session
#  uses: mxschmitt/action-tmate@v3
