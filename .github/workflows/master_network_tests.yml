# This workflow runs anytime new commits are added to master branch.
# It runs all network tests on the master branch using linux and one
# python version.
name: master_network_tests
on:
  push:
    branches:
      - master

# Set globally scoped environmental variables.
env:
  OBSPY_GITHUB_BRANCH: release_0.10.0

jobs:
  network_tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: test3.9
          use-mamba: true
          python-version: 3.9

      - uses: actions/cache@v2
        with:
          path: /usr/share/miniconda3/envs/test3.9
          key: ${{ matrix.label }}-conda-py3.9-${{ hashFiles('.github/test_conda_env-3.9.yml') }}-${{ steps.date.outputs.date }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: mamba env update -n test3.9 -f .github/test_conda_env-3.9.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: install obspy
        shell: bash -l {0}
        run: |
          pip install -e .

      - name: install obspy github api
        shell: bash -l {0}
        run: |
          pip install git+https://github.com/obspy/obspy_github_api@${OBSPY_GITHUB_BRANCH}

      - name: run test suite
        shell: bash -l {0}
        run: |
          export MODULELIST=`obshub get-module-list --group all --sep ','`
          export MODULELISTSPACES=`obshub get-module-list --group default --sep ' '`
          export MODULES=${MODULELISTSPACES//obspy.}
          if [ "$RUNNER_OS" == "macOS" ]; then
              python -m obspy.scripts.runtests --no-flake8 -n gh-actions -r -v --ci-url="${CI_URL}" $MODULES
          else
              coverage run --rcfile=.coveragerc --source=${MODULELIST} -m obspy.scripts.runtests --no-flake8 -n gh-actions -r -v --ci-url="${CI_URL}" $MODULES
              coverage xml -o coverage.xml
          fi

      - name: upload coverage
        if: runner.os != 'macOS'
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
